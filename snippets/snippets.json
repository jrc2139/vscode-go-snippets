{
  "single import": {
    "prefix": "im",
    "body": "import \"${1:package}\"",
    "description": "Snippet for import statement"
  },
  "multiple imports": {
    "prefix": "ims",
    "body": "import (\n\t\"${1:package}\"\n)",
    "description": "Snippet for a import block"
  },
  "single constant": {
    "prefix": "co",
    "body": "const ${1:name} = ${2:value}",
    "description": "Snippet for a constant"
  },
  "multiple constants": {
    "prefix": "cos",
    "body": "const (\n\t${1:name} = ${2:value}\n)",
    "description": "Snippet for a constant block"
  },
  "type interface declaration": {
    "prefix": "tyi",
    "body": "type ${1:name} interface {\n\t$0\n}",
    "description": "Snippet for a type interface"
  },
  "type struct declaration": {
    "prefix": "tys",
    "body": "type ${1:name} struct {\n\t$0\n}",
    "description": "Snippet for a struct declaration"
  },
  "package main and main function": {
    "prefix": "pkgm",
    "body": "package main\n\nfunc main() {\n\t$0\n}",
    "description": "Snippet for main package & function"
  },
  "function declaration": {
    "prefix": "func",
    "body": "func $1($2) $3 {\n\t$0\n}",
    "description": "Snippet for function declaration"
  },
  "variable declaration": {
    "prefix": "var",
    "body": "var ${1:name} ${2:type}",
    "description": "Snippet for a variable"
  },
  "switch statement": {
    "prefix": "switch",
    "body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$0\n}",
    "description": "Snippet for switch statement"
  },
  "select statement": {
    "prefix": "sel",
    "body": "select {\ncase ${1:condition}:\n\t$0\n}",
    "description": "Snippet for select statement"
  },
  "case clause": {
    "prefix": "cs",
    "body": "case ${1:condition}:$0",
    "description": "Snippet for case clause"
  },
  "for statement": {
    "prefix": "for",
    "body": "for ${1:index} := 0; $1 < ${2:count}; $1${3:++} {\n\t$0\n}",
    "description": "Snippet for a for loop"
  },
  "for range statement": {
    "prefix": "forr",
    "body": "for ${1:_, }${2:var} := range ${3:var} {\n\t$0\n}",
    "description": "Snippet for a for range loop"
  },
  "channel declaration": {
    "prefix": "ch",
    "body": "chan ${1:type}",
    "description": "Snippet for a channel"
  },
  "map declaration": {
    "prefix": "map",
    "body": "map[${1:type}]${2:type}",
    "description": "Snippet for a map"
  },
  "empty interface": {
    "prefix": "in",
    "body": "interface{}",
    "description": "Snippet for empty interface"
  },
  "if statement": {
    "prefix": "if",
    "body": "if ${1:condition} {\n\t$0\n}",
    "description": "Snippet for if statement"
  },
  "else branch": {
    "prefix": "el",
    "body": "else {\n\t$0\n}",
    "description": "Snippet for else branch"
  },
  "if else statement": {
    "prefix": "ie",
    "body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}",
    "description": "Snippet for if else"
  },
  "if err != nil": {
    "prefix": "iferr",
    "body": "if err != nil {\n\t${1:return ${2:nil, }${3:err}}\n}",
    "description": "Snippet for if err != nil"
  },
  "fmt.Println": {
    "prefix": "fp",
    "body": "fmt.Println(\"$1\")",
    "description": "Snippet for fmt.Println()"
  },
  "fmt.Printf": {
    "prefix": "ff",
    "body": "fmt.Printf(\"$1\", ${2:var})",
    "description": "Snippet for fmt.Printf()"
  },
  "log.Println": {
    "prefix": "lp",
    "body": "log.Println(\"$1\")",
    "description": "Snippet for log.Println()"
  },
  "log.Printf": {
    "prefix": "lf",
    "body": "log.Printf(\"$1\", ${2:var})",
    "description": "Snippet for log.Printf()"
  },
  "log variable content": {
    "prefix": "lv",
    "body": "log.Printf(\"${1:var}: %#+v\\\\n\", ${1:var})",
    "description": "Snippet for log.Printf() with variable content"
  },
  "t.Log": {
    "prefix": "tl",
    "body": "t.Log(\"$1\")",
    "description": "Snippet for t.Log()"
  },
  "t.Logf": {
    "prefix": "tlf",
    "body": "t.Logf(\"$1\", ${2:var})",
    "description": "Snippet for t.Logf()"
  },
  "t.Logf variable content": {
    "prefix": "tlv",
    "body": "t.Logf(\"${1:var}: %#+v\\\\n\", ${1:var})",
    "description": "Snippet for t.Logf() with variable content"
  },
  "make(...)": {
    "prefix": "make",
    "body": "make(${1:type}, ${2:0})",
    "description": "Snippet for make statement"
  },
  "new(...)": {
    "prefix": "new",
    "body": "new(${1:type})",
    "description": "Snippet for new statement"
  },
  "panic(...)": {
    "prefix": "pn",
    "body": "panic(\"$0\")",
    "description": "Snippet for panic"
  },
  "http ResponseWriter *Request": {
    "prefix": "wr",
    "body": "${1:w} http.ResponseWriter, ${2:r} *http.Request",
    "description": "Snippet for http Response"
  },
  "http.HandleFunc": {
    "prefix": "hf",
    "body": "${1:http}.HandleFunc(\"${2:/}\", ${3:handler})",
    "description": "Snippet for http.HandleFunc()"
  },
  "http handler declaration": {
    "prefix": "hand",
    "body": "func $1(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n\t$0\n}",
    "description": "Snippet for http handler declaration"
  },
  "http.Redirect": {
    "prefix": "rd",
    "body": "http.Redirect(${1:w}, ${2:r}, \"${3:/}\", ${4:http.StatusFound})",
    "description": "Snippet for http.Redirect()"
  },
  "http.Error": {
    "prefix": "herr",
    "body": "http.Error(${1:w}, ${2:err}.Error(), ${3:http.StatusInternalServerError})",
    "description": "Snippet for http.Error()"
  },
  "http.ListenAndServe": {
    "prefix": "las",
    "body": "http.ListenAndServe(\"${1::8080}\", ${2:nil})",
    "description": "Snippet for http.ListenAndServe"
  },
  "http.Serve": {
    "prefix": "sv",
    "body": "http.Serve(\"${1::8080}\", ${2:nil})",
    "description": "Snippet for http.Serve"
  },
  "goroutine anonymous function": {
    "prefix": "go",
    "body": "go func($1) {\n\t$0\n}($2)",
    "description": "Snippet for anonymous goroutine declaration"
  },
  "goroutine function": {
    "prefix": "gf",
    "body": "go ${1:func}($0)",
    "description": "Snippet for goroutine declaration"
  },
  "defer statement": {
    "prefix": "df",
    "body": "defer ${1:func}($0)",
    "description": "Snippet for defer statement"
  },
  "test function": {
    "prefix": "tf",
    "body": "func Test$1(t *testing.T) {\n\t$0\n}",
    "description": "Snippet for Test function"
  },
  "benchmark function": {
    "prefix": "bf",
    "body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}",
    "description": "Snippet for Benchmark function"
  },
  "example function": {
    "prefix": "ef",
    "body": "func Example$1() {\n\t$2\n\t//Output:\n\t$3\n}",
    "description": "Snippet for Example function"
  },
  "table driven test": {
    "prefix": "tdt",
    "body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
    "description": "Snippet for table driven test"
  },
  "init function": {
    "prefix": "finit",
    "body": "func init() {\n\t$1\n}",
    "description": "Snippet for init function"
  },
  "main function": {
    "prefix": "fmain",
    "body": "func main() {\n\t$1\n}",
    "description": "Snippet for main function"
  },
  "method declaration": {
    "prefix": "meth",
    "body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
    "description": "Snippet for method declaration"
  },
  "hello world web app": {
    "prefix": "helloweb",
    "body": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc greet(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World! %s\", time.Now())\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", greet)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "description": "Snippet for sample hello world webapp"
  },
  "sort implementation": {
    "prefix": "sort",
    "body": "type ${1:SortBy} []${2:Type}\n\nfunc (a $1) Len() int           { return len(a) }\nfunc (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }",
    "description": "Snippet for a custom sort.Sort interface implementation, for a given slice type."
  },
  "range.map": {
    "description": "range map",
    "prefix": "range.map",
    "body": ["for k,v := range $1{", "\t$0", "}"],
    "scope": "go"
  },
  "range.arr": {
    "description": "range array, slices",
    "prefix": "range.arr",
    "body": ["for i,v := range $1{", "\t$0", "}"],
    "scope": "go"
  },
  "range.str": {
    "description": "range interate over unicode points,not bytes",
    "prefix": "range.str",
    "body": ["for i,r := range $1{", "\t$0", "}"],
    "scope": "go"
  },
  "slice.av": {
    "description": "Slice Append Vector",
    "prefix": "slice.av",
    "body": ["${1: arr} = append($1, ${vec:2}...)"],
    "scope": "go"
  },
  "slice.copy": {
    "description": "Slice Copy",
    "prefix": "slice.copy",
    "body": ["${1:dest} = make([]${2:int}, len(${3:src}))", "copy($1, $3)"],
    "scope": "go"
  },
  "slice.cut": {
    "body": "a = append(a[:i], a[j:]...)",
    "prefix": "slice.cut",
    "description": "a = append(a[:i], a[j:]...)",
    "scope": "go"
  },
  "slice.delete": {
    "body": "a = append(a[:i], a[i+1:]...)",
    "prefix": "slice.delete",
    "description": "a = append(a[:i], a[i+1:]...)",
    "scope": "go"
  },
  "slice.extend": {
    "body": "a = append(a, make([]T, j)...)",
    "prefix": "slice.extend",
    "description": "a = append(a, make([]T, j)...)",
    "scope": "go"
  },
  "slice.insert": {
    "body": "a = append(a[:i], append([]T{x}, a[i:]...)...)",
    "prefix": "slice.insert",
    "description": "a = append(a[:i], append([]T{x}, a[i:]...)...)",
    "scope": "go"
  },
  "slice.unshift": {
    "body": "a = append([]T{x}, a...)",
    "prefix": "slice.unshift",
    "description": "a = append([]T{x}, a...)",
    "scope": "go"
  },
  "slice.push": {
    "body": "a = append(a, x)",
    "prefix": "slice.push",
    "description": "a = append(a, x)",
    "scope": "go"
  },
  "slice.pop": {
    "body": "x, a = a[0], a[1:]",
    "prefix": "slice.pop",
    "description": "x, a = a[0], a[1:]",
    "scope": "go"
  },
  "slice.popback": {
    "body": "x, a = a[len(a) -1], a[:len(a) -1]",
    "prefix": "slice.popback",
    "description": "x, a = a[len(a) -1], a[:len(a) -1]",
    "scope": "go"
  },
  "absi": {
    "description": "abs for int",
    "prefix": "absi",
    "body": [
      "func abs(num int) int {",
      "\tif num < 0 {",
      "\t\treturn -num",
      "\t}",
      "\treturn num",
      "}"
    ],
    "scope": "go"
  },
  "maxi": {
    "description": "max for int",
    "prefix": "maxi",
    "body": [
      "func max(a, b int) int {",
      "\tif a > b {",
      "\t\treturn a",
      "\t}",
      "\treturn b",
      "}"
    ],
    "scope": "go"
  },
  "mini": {
    "description": "min for int",
    "prefix": "mini",
    "body": [
      "func mini(a, b int) int {",
      "\tif a < b {",
      "\t\treturn a",
      "\t}",
      "\treturn b",
      "}"
    ],
    "scope": "go"
  },
  "sumi": {
    "description": "sum for ints",
    "prefix": "sumi",
    "body": [
      "func sum(nums []int) int {",
      "\ts := 0",
      "\tfor _, num := range nums {",
      "\t\ts += num",
      "\t}",
      "\treturn s",
      "}"
    ],
    "scope": "go"
  },
  "avgi": {
    "description": "avg for ints",
    "prefix": "avgi",
    "body": [
      "func avg(nums []int) float64 {",
      "\ts := 0",
      "\tfor _, num := range nums {",
      "\t\ts += num",
      "\t}",
      "\treturn float64(s) / float64(len(nums))",
      "}"
    ],
    "scope": "go"
  },
  "maxints": {
    "description": "max for ints",
    "prefix": "maxints",
    "body": [
      "func maxInts(nums ...int) int {",
      "\tmaxNum := -int(^uint(0)>>1) - 1",
      "\tfor _, num := range nums {",
      "\t\tif num > maxNum {",
      "\t\t\tmaxNum = num",
      "\t\t}",
      "\t}",
      "\treturn maxNum",
      "}"
    ],
    "scope": "go"
  },
  "joinints": {
    "description": "join ints to string",
    "prefix": "joinints",
    "body": [
      "import (",
      "\t\"strconv\"",
      "\t\"strings\"",
      ")",
      "func joinNums(arr []int, sep string) string {",
      "\tnumCount := len(arr)",
      "\tif numCount == 0 {",
      "\t\treturn \"\"",
      "\t}",
      "\tstrs := make([]string, numCount)",
      "\tfor i := 0; i < numCount; i++ {",
      "\t\tstrs[i] = strconv.Itoa(arr[i])",
      "\t}",
      "\treturn strings.Join(strs, sep)",
      "}"
    ],
    "scope": "go"
  },
  "limits": {
    "description": "MaxInt and MinInt",
    "prefix": "limits",
    "body": [
      "const (",
      "\tMaxInt = int(^uint(0) >> 1)",
      "\tMinInt = -MaxInt - 1",
      ")"
    ],
    "scope": "go"
  },
  "contains-str": {
    "description": "String slice contains str",
    "prefix": "contains-str",
    "body": [
      "func findIndex(strs []string, str string) int {",
      "\tfor index, curStr := range strs {",
      "\t\tif curStr == str {",
      "\t\t\treturn index",
      "\t\t}",
      "\t}",
      "\treturn -1",
      "}",
      "func containsStr(strs []string, str string) int {",
      "\treturn findIndex(strs, str) != -1",
      "}"
    ],
    "scope": "go"
  },
  "treenode": {
    "description": "type TreeNode struct",
    "prefix": "treenode",
    "body": [
      "type TreeNode struct {",
      "\tVal   int",
      "\tLeft  *TreeNode",
      "\tRight *TreeNode",
      "}"
    ],
    "scope": "go"
  },
  "dumptree": {
    "description": "Dump Tree using level order",
    "prefix": "dumptree",
    "body": [
      "import \"fmt\"",
      "func dumpTree(root *TreeNode) {",
      "\tif root == nil {",
      "\t\tfmt.Println(\"nil\")",
      "\t\treturn",
      "\t}",
      "\tbranches := []*TreeNode{root}",
      "\tfmt.Print(\"[\")",
      "\tfor len(branches) > 0 {",
      "\t\tbranch := branches[0]",
      "\t\tbranches = branches[1:]",
      "\t\tif branch.Left != nil {",
      "\t\t\tbranches = append(branches, branch.Left)",
      "\t\t}",
      "\t\tif branch.Right != nil {",
      "\t\t\tbranches = append(branches, branch.Right)",
      "\t\t}",
      "\t\tif len(branches) > 0 {",
      "\t\t\tfmt.Print(branch.Val, \",\")",
      "\t\t} else {",
      "\t\t\tfmt.Print(branch.Val, \"\")",
      "\t\t}",
      "\t}",
      "\tfmt.Println(\"]\")",
      "}"
    ],
    "scope": "go"
  },
  "listnode": {
    "description": "type ListNode struct",
    "prefix": "listnode",
    "body": ["type ListNode struct {", "\tVal  int", "\tNext *ListNode", "}"],
    "scope": "go"
  },
  "dumplistnode": {
    "description": "Dump ListNode using level order",
    "prefix": "dumplistnode",
    "body": [
      "import \"fmt\"",
      "func dumpListNode(lnode *ListNode) {",
      "\tfmt.Print(\"ListNode[\")",
      "\tfor lnode != nil {",
      "\t\tfmt.Print(lnode.Val, \",\")",
      "\t\tlnode = lnode.Next",
      "\t}",
      "\tfmt.Print(\"]\\n\")",
      "}"
    ],
    "scope": "go"
  },
  "reversearr": {
    "description": "Reverse Ints Array",
    "prefix": "reversearr",
    "body": [
      "func reverseArray(nums []int) {",
      "\tfor i, j := 0, len(nums)-1; i < j; i, j = i+1, j-1 {",
      "\t\ttmp := nums[i]",
      "\t\tnums[i] = nums[j]",
      "\t\tnums[j] = tmp",
      "\t}",
      "}"
    ],
    "scope": "go"
  },
  "reversestr": {
    "description": "Reverse String",
    "prefix": "reversestr",
    "body": [
      "func reverseString(s string) string {",
      "\tbytes := []byte(s)",
      "\tfor i, j := 0, len(bytes)-1; i < j; i, j = i+1, j-1 {",
      "\t\ttmp := bytes[i]",
      "\t\tbytes[i] = bytes[j]",
      "\t\tbytes[j] = tmp",
      "\t}",
      "\treturn string(bytes)",
      "}"
    ],
    "scope": "go"
  },
  "pbasic": {
    "description": "Basic file for problem",
    "prefix": "pbasic",
    "body": [
      "package main",
      "import (",
      "\t\"fmt\"",
      ")",
      "func main() {",
      "\tfmt.Println(\"Hello World\")",
      "}"
    ],
    "scope": "go"
  },
  "pbinarytree": {
    "description": "Binary Tree solution file stub",
    "prefix": "pbinarytree",
    "body": [
      "package main",
      "import (",
      "\t\"fmt\"",
      ")",
      "type TreeNode struct {",
      "\tVal   int",
      "\tLeft  *TreeNode",
      "\tRight *TreeNode",
      "}",
      "func levelOrderDump(root *TreeNode) {",
      "\tif root == nil {",
      "\t\treturn",
      "\t}",
      "\tlevelStacks := []*TreeNode{root}",
      "\tfor len(levelStacks) > 0 {",
      "\t\tbranch := levelStacks[0]",
      "\t\tlevelStacks = levelStacks[1:]",
      "\t\tfmt.Print(branch.Val, \",\")",
      "\t\tleft := branch.Left",
      "\t\tright := branch.Right",
      "\t\tif left != nil {",
      "\t\t\tlevelStacks = append(levelStacks, left)",
      "\t\t}",
      "\t\tif right != nil {",
      "\t\t\tlevelStacks = append(levelStacks, right)",
      "\t\t}",
      "\t}",
      "\tfmt.Println(\"\")",
      "}",
      "func main() {",
      "\troot := &TreeNode{Val: 4}",
      "\troot.Left = &TreeNode{Val: 2}",
      "\troot.Left.Left = &TreeNode{Val: 1}",
      "\troot.Left.Right = &TreeNode{Val: 3}",
      "\troot.Right = &TreeNode{Val: 7}",
      "\troot.Right.Left = &TreeNode{Val: 6}",
      "\troot.Right.Right = &TreeNode{Val: 9}",
      "\tlevelOrderDump(root)",
      "}"
    ],
    "scope": "go"
  },
  "p1darr": {
    "description": "One Dimen Array Basic file stub",
    "prefix": "p1darr",
    "body": [
      "package main",
      "import (",
      "\t\"fmt\"",
      ")",
      "func $1(nums []int) int {",
      "}",
      "func main() {",
      "\tfmt.Println(\"3 -> \", $1([]int{1, 1, 0, 1, 1, 1}))",
      "}"
    ],
    "scope": "go"
  },
  "p2darr": {
    "description": "One Dimen Array Basic file stub",
    "prefix": "p2darr",
    "body": [
      "package main",
      "import (",
      "\t\"fmt\"",
      ")",
      "func main() {",
      "\tarrA := [][]int{",
      "\t\t{1, 1, 0},",
      "\t\t{0, 1, 0},",
      "\t\t{0, 1, 0},",
      "\t}",
      "\tarrB := [][]int{",
      "\t\t{0, 0, 0},",
      "\t\t{0, 1, 1},",
      "\t\t{0, 0, 1},",
      "\t}",
      "\tfmt.Println(\"3 -> \")",
      "\tarrA2 := [][]int{",
      "\t\t{0, 1},",
      "\t\t{1, 1},",
      "\t}",
      "\tarrB2 := [][]int{",
      "\t\t{1, 1},",
      "\t\t{1, 0},",
      "\t}",
      "\tfmt.Println(\"2 -> \")",
      "}"
    ],
    "scope": "go"
  }
}
